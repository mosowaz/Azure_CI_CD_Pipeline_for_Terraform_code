# Pipeline template to be used in the main pipeline for multiple stages

stages:
- stage: Build_${{parameters.infrastructure}}
  displayName: '${{parameters.SourceDirectory}} Build Stage'
  pool:
    vmImage: ubuntu-latest

  jobs:
  - job: tfvalidate_checkov
    condition: ne(variables['Build.SourceBranchName'], 'main')
    steps:
    - checkout: self
    - template: checkov-terraform_install.yml
      
    - bash: terraform version && checkov --version
      name: tf_checkov_version_check
      displayName: 'check terraform and checkov version'

    - bash: |
        checkov -d ${{Pipeline.Workspace}} --quiet --skip-check CKV2_AZURE_39,CKV2_AZURE_31,CKV_AZURE_50 \
          --enable-secret-scan-all-files --deep-analysis \
          --skip-path SPN-Terraform-Deployment/ 
      continueOnError: false
      displayName: 'Scan terraform and pipeline files with checkov'

    - bash: |
        terraform init -input=false \
          -backend-config="resource_group_name=$(RGName)" \
          -backend-config="storage_account_name=$(StorageAccName)" \
          -backend-config="container_name=$(ContainerName)" \
          -backend-config="key=${{parameters.BlobName}}" \
          -backend-config="use_azuread_auth=true"
        terraform fmt && terraform validate  
      env:
        ARM_CLIENT_ID: $(SPN2-client-id)
        ARM_TENANT_ID: $(SPN2-tenant-id)
        ARM_CLIENT_SECRET: $(SPN2-client-secret)
        ARM_SUBSCRIPTION_ID: $(SPN2-subscription-id)
      displayName: 'terraform fmt and validate'
      workingDirectory: ${{parameters.SourceDirectory}}


  - job: plan_scan_publish
    dependsOn: tfvalidate_checkov
    condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main')) 
    steps:
    - checkout: self
    - bash: | 
        terraform init -input=false \
          -backend-config="resource_group_name=$(RGName)" \
          -backend-config="storage_account_name=$(StorageAccName)" \
          -backend-config="container_name=$(ContainerName)" \
          -backend-config="key=${{parameters.BlobName}}" \
          -backend-config="use_azuread_auth=true"
        terraform plan -out='${{parameters.tfplan}}' -lock=false -input=false 

        pipx install checkov
        pipx ensurepath && source ~/.bashrc
        checkov -d ${{Pipeline.Workspace}} --quiet \
          --skip-check CKV2_AZURE_39,CKV2_AZURE_31,CKV_AZURE_50 \
          --enable-secret-scan-all-files --deep-analysis 
      env:
        ARM_CLIENT_ID: $(SPN2-client-id)
        ARM_TENANT_ID: $(SPN2-tenant-id)
        ARM_CLIENT_SECRET: $(SPN2-client-secret)
        ARM_SUBSCRIPTION_ID: $(SPN2-subscription-id)
        TF_VAR_hub-sshkey: $(hub-sshkey)
        TF_VAR_hub-sshkey-pub: $(hub-sshkey-pub)
        TF_VAR_sp1-sshkey: $(sp1-sshkey)
        TF_VAR_sp1-sshkey-pub: $(sp1-sshkey-pub)
        TF_VAR_sp2-sshkey: $(sp2-sshkey)
        TF_VAR_sp2-sshkey-pub: $(sp2-sshkey-pub)
        TF_VAR_mypublic-ip: $(mypublic-ip)
      workingDirectory: ${{parameters.SourceDirectory}}
      displayName: 'terraform plan and scan planFile'
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: ${{parameters.SourceDirectory}}
        artifact: '${{parameters.tfplan}}' # artifactName
        publishLocation: 'pipeline' # upload artifact to pipeline
      displayName: 'Publishing artifact'
    continueOnError: false  
   
- stage: Deploy_${{parameters.infrastructure}}
  condition: eq(variables['Build.SourceBranchName'], 'main')
  displayName: '${{parameters.SourceDirectory}} Deploy Stage'
  pool:
    vmImage: ubuntu-latest

  jobs:
  - deployment: apply
    environment: $(ADO-Environment)        
    strategy:
      runOnce:
        deploy:
          steps:
          - download: none
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: '${{parameters.tfplan}}'
              targetPath: '$(Build.SourcesDirectory)'
            displayName: 'Downloading artifact'

          - template: checkov-terraform_install.yml
          
          - bash: |
              chmod -R a+x .terraform/*
              terraform init -input=false \
                -backend-config="resource_group_name=$(RGName)" \
                -backend-config="storage_account_name=$(StorageAccName)" \
                -backend-config="container_name=$(ContainerName)" \
                -backend-config="key=${{parameters.BlobName}}" \
                -backend-config="use_azuread_auth=true"
              terraform apply -auto-approve -input=false '-lock-timeout=2m' '${{parameters.tfplan}}' 
            env:
              ARM_CLIENT_ID: $(SPN2-client-id)
              ARM_TENANT_ID: $(SPN2-tenant-id)
              ARM_CLIENT_SECRET: $(SPN2-client-secret)
              ARM_SUBSCRIPTION_ID: $(SPN2-subscription-id)
            displayName: 'terraform apply'


